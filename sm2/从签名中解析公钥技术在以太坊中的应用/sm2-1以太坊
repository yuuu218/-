/*
report on the application of this deduce technique in Ethereum with ECDSA——从签名中解析公钥技术在以太坊中的应用
***本题需了解以太坊相关知识，文字叙述较多。
一、	账户、地址、私钥和公钥
  账户扮演着以太坊的中心角色，地址是我们与以太坊系统进行交互的标识，它是以太坊账户与外界进行交互的名字，而私钥与公钥是保护我们账户安全的重要屏障。
  大体来说，地址的生成的流程是：私钥 -> 公钥 -> 地址。
二、	以太坊的交易流程
（1）发起交易：指定目标地址和交易金额，以及必需的gas/gasLimit
（2）交易签名：使用账户私钥对交易进行签名。和比特币一样，也是先对交易本身求hash，再进行签名
（3）提交交易：验签交易，并将交易提交到交易缓冲池
（4）广播交易：通知以太坊虚拟机吧交易信息广播给其他节点
三、以太坊的一个交易到打包的流程
（1）TxPool从网络上接收到一个交易，发送TxPreEvent事件。
（2）worker在接收到TxPreEvent事件后，调用update->commitTransactions提交目前收到的交易。
（3）Work中的commitTransaction负责调用EVM虚拟机执行交易，并返回给Work有关此次交易的Receipt（执行列表）。
（4）Miner调用Work的commitNewWork，从交易列表中选择交易，组装区块结构。
（5）Work调用CpuAgent，完成POW工作量证明（打包）。
（6）一旦区块打包成功，worker广播NewMinedBlockEvent事件。
四、从签名推导公钥
签名后的交易发送到以太坊节点后，节点需要从签名交易中还原出公钥(从公钥中单向计算出账号地址)，进而将交易放入交易池中。
*/
def pk_fron_signature():
    IDA = 'ALICE123@YAHOO.COM'
    M = 'message digest'
    dA = 0x128B2FA8BD433C6C068C8D803DFF79792A519A55171B1B650C23661D15897263
    xA = 0x0AE4C7798AA0F119471BEE11825BE46202BB79E2A5844495E97C04FF4DF2548A
    yA = 0x7C0240F88F1CD4E16352A73C17B7F16F07353E53A176D684A9FE0C6BB798E857
    PA = (xA, yA)
    k = 0x6CB28D99385C175C94F94E934817663FC176D925DD72B727260DBAAE1FB2F96F
    n = 0x8542D69E4C044F18E8B92435BF6FF7DD297720630485628D5AE74EE7C32E79B7
    a = 0x787968B4FA32C3FD2417842E73BBFEFF2F3C848B6831D7E0EC65228B3937E498
    b = 0x63E4C6D3B23B0C849CF84241484BFE48F61D59A5B16BA06E6E12D1DA27C5249A
    xG = 0x421DEBD61B62EAB6746434EBC3CC315E32220B3BADD50BDC4C4E6C147FEDD43D
    yG = 0x0680512BCBB42C07D47349D2153B70C4E5D7FDFCBFA36EA1A85841B9E46E09A2
    G=(xG,yG)
    sm2_A = SM2(*demo_para(), IDA, dA, PA)
    sm2_B = SM2(*demo_para())
    # A、B双方初始化
    # A对消息M进行签名
    r,s,e = sm2_A.sign(M, k,0,)
    # A将消息M签名(r, s)发送给B
    xA1 = 0x0
    yA1 = 0x0
    x1 = (r- e) % n;
    #y1 = pow((x1 * x1 * x1 + a * x1 + b)%n,0.5);
    y1=12844692015861483985796897070387313459524129685989174230708833771946472557082
    kG = (x1, y1)
    fan = sm2_A.minus(sm2_A.Jacb_multiply(s, G))
    xA1, yA1 = sm2_A.Jacb_multiply(get_inverse(r + s, n), sm2_A.add(kG, fan));
    xA1=hex(xA1);
    yA1 = hex(yA1);
    PA1 = (xA1, yA1)
    print("公钥为",PA1)
